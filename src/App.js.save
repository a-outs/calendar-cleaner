Aimport React, { useState } from 'react';
import DayPickerInput from 'react-day-picker/DayPickerInput';
import 'react-day-picker/lib/style.css';
import linkhelp1 from './linkhelp1.jpg';
import './App.css';

function App() {
  const [inputLink, setInputLink] = useState('');
  const [blacklist, setBlacklist] = useState('');
  const [startDate, setStartDate] = useState(new Date('0001-01-01T01:00:00.000Z'));
  const [endDate, setEndDate] = useState(new Date('9999-01-01T01:00:00.000Z'));
  const [separate, setSeparate] = useState(false);
  const [excludeEvents, setExcludeEvents] = useState(false);
  const [excludeHelpText, setExcludeHelp] = useState('');
  const [moreInfoText, setMoreInfoText] = useState({display: "none"});
  const [linkHelpText, setLinkHelpText] = useState({display: "none"});
  const [output, setOutput] = useState(<div></div>);
  const [disabled, setDisabled] = useState('disabled');

  var payload = {
    postData: {
      inputLinkData: inputLink,
      blacklistData: blacklist,
      separateData: separate,
      excludeEventsData: excludeEvents,
      startDate: startDate.toISOString().substring(0,10),
      endDate: endDate.toISOString().substring(0,10)
    }
  }

  const outputHTML = (json) => {
    var outputHTMLarray = [];
    try {
      for(let i = 0; i < json.links.length; i++) {
        outputHTMLarray[i] = <><p key={-1-i}>Class {i + 1}'s calendar: <a href={json.links[i]} key={i}>{json.links[i]}</a></p></>;
      }
      setOutput(<div id='output'><hr/><h2>Your new calendar links:</h2>{outputHTMLarray}</div>);
    } catch (e) {
    }
  }

  const moreInfo = () => {
    if(Object.keys(moreInfoText).length == 0) setMoreInfoText({display: "none"});
    else setMoreInfoText({});
  }

  const excludeHelp = () => {
    if(excludeHelpText === "") setExcludeHelp("This will remove all of the 'events' from the calendar, meaning only things such as quizzes or assignments will be left on the calendar. (Click the question mark again to close this message)");
    else setExcludeHelp("");
  }

  const linkHelp = () => {
    if(Object.keys(linkHelpText).length == 0) setLinkHelpText({display: "none"});
    else setLinkHelpText({});
  }

  const validURL = (str) => {
    if(str==="") {
      return "";
    }
    var pattern = new RegExp('(https://canvas.ucdavis.edu/feeds/calendars/user_).{3,}.ics');
    if(!!pattern.test(str)) {
      return "";
    }
    else return "Warning! This link is invalid. Make sure this is copied straight from canvas.";
  }

  const validBlacklist = (str) => {
    var blacklistWarning = "Warning! This input is invalid. Make sure your blacklist consists of keywords contained in quotes seperated with commas.";
    var splitBlack = str.split(',');
    splitBlack.forEach(black => {
      if(str.charAt(0) !== '"' || str.charAt(str.length - 1) !== '&quot' || str.substring(1, str.length - 1).includes('&quot')) return blacklistWarning;
      else return "";
    });
  }

  const handleStartDate = (day) => {
    setStartDate(day);
  }

  const handleEndDate = (day) => {
    setEndDate(day);
  }

  const disabledChecker = () => {
    if(validURL(inputLink) !== "") return "disabled";
    else return "";
  }

  const handleSubmit = (event) => {
    event.preventDefault();
    fetch('/api/PostCal', {
      method: 'POST',
      body: JSON.stringify(payload),
      headers: new Headers({
        "Content-Type":"application/json"
      })
    }).then(data => data.json()
    ).then(json => {
      console.log(json);
      outputHTML(json);
    });
  }

  return (
    <div className="App">
      <header className="App-header">
	<h1>Canvas Calendar Cleaner</h1>
        <p>Welcome to the Canvas Calendar Cleaner. Input your calendar link straight from Canvas along with any additional parameters as desired. We'll give you a link that you can use for <b>10 minutes</b> before it expires.</p>
	<button onClick={moreInfo}>Click here to show/hide more information</button>
	<div class='moreInfo' style={moreInfoText}>
	  <h2>Explanation of inputs</h2>
	  <p><b>Canvas calendar link:</b> This is where you paste the link straight from the Canvas website</p>
	  <p><b>Blacklist:</b> Any event from the original calendar whose title matches any keywords in the blacklist will be removed. Make sure keywords are enclosed in quotes and seperated by a comma. Not doing this may lead to unintended side effects.</p>
	  <p><b>Calendar start date:</b> Any events that take place before this date will be removed.</p>
	  <p><b>Calendar end date:</b> Any events that take place after this date will be removed.</p>
	  <br/>
          <p><i>This is a webapp originally created for HackDavis 2021. Made by Tim Stewart, Aidan Lee, Peter Yu, and Jun Min Kim</i></p>
	</div>
	<hr/>
	<form onSubmit={handleSubmit}>
	  <label> Canvas calendar link<sup><a onClick={linkHelp}>[?]</a></sup>:
	  <input
	    type='text'
	    id='input'
	    name='inputLink'
	    value={inputLink}
	    placeholder="https://canvas.ucdavis.edu/feeds/calendars/user_JSDFLUgjvmsdalkjSDIg.ics"
	    onChange={event => setInputLink(event.target.value)}
	  />
	  </label>
	  <div id='linkHelpText' style={linkHelpText}>
	    <p>The link may be found here on the canvas website:</p>
	    <img src={linkhelp1} width="20vmin" />
	  </div>
	  <p id='warning'>{validURL(inputLink)}</p>
	  <label>Blacklist:
	  <input
	    type='text'
	    id='input'
	    name='blacklist'
	    value={blacklist}
	    placeholder='"Lecture", "Discussion", "etc."'
	    onChange={event => setBlacklist(event.target.value)}
	  />
	  </label>
	<br/>
	  <label>Calendar start date: <DayPickerInput onDayChange={handleStartDate} /> </label>
	<br/>
	  <label>Calendar end date: <DayPickerInput onDayChange={handleEndDate} /> </label>
	<br/>
	<label>Split calendar by class:
	  <input
	    type='checkbox'
	    id='checkbox'
	    name='separate'
	    value={separate}
	    onChange={event => setSeparate(!separate)}
	  />
	</label>
	<br/>
	<label>Exclude all events<sup><a onClick={excludeHelp}>[?]</a></sup>:
	  <input
	    type='checkbox'
	    id='checkbox'
	    name='excludeEvents'
	    value={excludeEvents}
	    onChange={event => setExcludeEvents(!excludeEvents)}
	  />
	</label>
	<p>{excludeHelpText}</p>
	  <br/>
	  <input
	    type='submit'
	    value='Submit'
	    disabled={disabledChecker()}
	  />
	</form>
	{output}
      </header>
    </div>
  );
}

export default App;
